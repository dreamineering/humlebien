// //
// // Global Foundation Mixins
// //

// @import "responsive";

// $experimental: true !default;

// // We use this to control border radius.
// @mixin radius($radius:$global-radius) {
//   @if $radius {
//     @if $experimental {
//       -webkit-border-radius: $radius;
//     }
//     border-radius: $radius;
//   }
// }

// // We use this to create equal side border radius on elements.
// @mixin side-radius($side, $radius) {
//   @if $side == left {
//     @if $experimental {
//       -moz-border-radius-bottomleft: $radius;
//       -moz-border-radius-topleft: $radius;
//       -webkit-border-bottom-left-radius: $radius;
//       -webkit-border-top-left-radius: $radius;
//     }
//     border-bottom-left-radius: $radius;
//     border-top-left-radius: $radius;
//   }
//   @else if $side == right {
//     @if $experimental {
//       -moz-border-radius-topright: $radius;
//       -moz-border-radius-bottomright: $radius;
//       -webkit-border-top-right-radius: $radius;
//       -webkit-border-bottom-right-radius: $radius;
//     }
//     border-top-right-radius: $radius;
//     border-bottom-right-radius: $radius;
//   }
//   @else if $side == top {
//     @if $experimental {
//       -moz-border-radius-topright: $radius;
//       -moz-border-radius-topleft: $radius;
//       -webkit-border-top-right-radius: $radius;
//       -webkit-border-top-left-radius: $radius;
//     }
//     border-top-right-radius: $radius;
//     border-top-left-radius: $radius;
//   }
//   @else if $side == bottom {
//     @if $experimental {
//       -moz-border-radius-bottomright: $radius;
//       -moz-border-radius-bottomleft: $radius;
//       -webkit-border-bottom-right-radius: $radius;
//       -webkit-border-bottom-left-radius: $radius;
//     }
//     border-bottom-right-radius: $radius;
//     border-bottom-left-radius: $radius;
//   }
// }

// // We can control whether or not we have inset shadows edges.
// @mixin inset-shadow($active:true) {
//   @if $experimental {
//     -webkit-box-shadow: $shiny-edge-size $shiny-edge-color inset;
//   }
//   box-shadow: $shiny-edge-size $shiny-edge-color inset;

//   @if $active { &:active {
//     @if $experimental {
//       -webkit-box-shadow: $shiny-edge-size $shiny-edge-active-color inset;
//     }
//     box-shadow: $shiny-edge-size $shiny-edge-active-color inset; } }
// }

// // We use this to add transitions to elements
// @mixin single-transition($property:all, $speed:300ms, $ease:ease-out) {
//   @if $experimental {
//     -webkit-transition: $property $speed $ease;
//     -moz-transition: $property $speed $ease;
//   }
//   transition: $property $speed $ease;
// }

// // We use this to add box-sizing across browser prefixes
// @mixin box-sizing($type:border-box) {
//   @if $experimental {
//     -moz-box-sizing: $type;
//     -webkit-box-sizing: $type;
//   }
//   box-sizing: $type;
// }

// // We use this to create equilateral triangles
// @mixin css-triangle($triangle-size, $triangle-color, $triangle-direction) {
//   content: "";
//   display: block;
//   width: 0;
//   height: 0;
//   border: inset $triangle-size;
//   @if ($triangle-direction == top) {
//     border-color: $triangle-color transparent transparent transparent;
//     border-top-style: solid;
//   }
//   @if ($triangle-direction == bottom) {
//     border-color: transparent transparent $triangle-color transparent;
//     border-bottom-style: solid;
//   }
//   @if ($triangle-direction == left) {
//     border-color: transparent transparent transparent $triangle-color;
//     border-left-style: solid;
//   }
//   @if ($triangle-direction == right) {
//     border-color: transparent $triangle-color transparent transparent;
//     border-right-style: solid;
//   }
// }

// // We use this to do clear floats
// // TODO create as placeholder?
// @mixin clearfix() {
//   *zoom:1;
//   &:before, &:after { content: " "; display: table; }
//   &:after { clear: both; }
// }


// // We use this to add a glowing effect to block elements
// @mixin block-glowing-effect($selector:focus, $fade-time:300ms, $glowing-effect-color:fade-out($primary-color, .25)) {
//   @if $experimental {
//     -webkit-transition: -webkit-box-shadow $fade-time, border-color $fade-time ease-in-out;
//     -moz-transition: -moz-box-shadow $fade-time, border-color $fade-time ease-in-out;
//   }
//   transition: box-shadow $fade-time, border-color $fade-time ease-in-out;

//   &:#{$selector} {
//     @if $experimental {
//       -webkit-box-shadow: 0 0 5px $glowing-effect-color;
//       -moz-box-shadow: 0 0 5px $glowing-effect-color;
//     }
//     box-shadow: 0 0 5px $glowing-effect-color;
//     border-color: $glowing-effect-color;
//   }
// }